https://www.programiz.com/javascript/operators

# JavaScript Operator Types :
Q. What is operands, operators, operation?
  - unary, binary, ternary
* LHS Operator RHS --> Action, Return

1. Unary operators: +, ++, -- (Pre, post)
2. Binary operators:
    1. Arithmetic Operators:+,-,*,/,**,%
    2. Assignment Operators: =, +=, -=, *=, /=, %=, **= (short hand methods)
    3. Comparison Operators: <, >, <=, >=, ==, ===, !=, !==
    4. Logical Operators: &&, ||, !
    5. Bitwise Operators.
    6. Miscellaneous Operators:, typeof, instanceof, void() --> Explain->;
3. Ternary operators: 
    1. conditional operator.

*Examples Unary operators:
    let a = 55;
    let b = a++ + --a + ++a + a--;
             55 + 55 + 56 + 56
    console.log(b) // 222

    x=20,y=30;
    x++ + --y + ++y + --x
    20+29+30+20

NOTE: Focus on the variable values, what current variable value holding the variable(not considering any post operation) will consider for print/further operation

Q. using ternary operator find the greatest number amongst 3 numbers
----------------------------------------------------------
1. Arithmetic Operators:-

+	Addition	    3 + 4  // 7
-	Subtraction	    5 - 3  // 2
*	Multiplication	2 * 3  // 6
/	Division	    4 / 2  // 2
%	Remainder	    5 % 2  // 1
**	Exponentiation (Power) 2**3 // 8

#Example:
let x = 5;

console.log("Prefix Increment: ++x =", ++x);
console.log("Postfix Increment: x++ =", x++);
console.log("After Postfix Increment: x =", x);

console.log("\nPrefix Decrement: --x =", --x);
console.log("Prefix Decrement: x-- =", x--);
console.log("After Prefix Decrement: x =", x);

-------------------------
# unary operators:
    -unary operator need only one operands
    + is unary operator to convert string to number
    ++ is an increment operator to increase the value by 1
    -- is an decrement operator to decrease the value by 1

pre increment(++a===> incremnet+ update) , post increment (a++===>update+ increment)

let a = 55;
let b = a++ + --a + ++a + a--;
//55 + 55 + 56 + 56
console.log(b) // 222

// x=20,y=30;
// x++ + --y + ++y + --x
// 20+29+30+20

NOTE: Focus on the variable values, what current variable value holding the variable(not considering any post operation) will consider for print/further operation
-------------------------------------------------------------------------------------
2. Assignment Operators:-

Operator	Name	        Example
=	Assignment Operator	    a = 7;
+=	Addition Assignment	    a += 5;  // a = a + 5
-=	Subtraction Assignment	a -= 2;  // a = a - 2
*=	Multiplication Assignment	a *= 3;  // a = a * 3
/=	Division Assignment	    a /= 2;  // a = a / 2
%=	Remainder Assignment	a %= 2;  // a = a % 2
**=	Exponentiation Assignment	a **= 2;  // a = a**2

// assignment operator
let a = 7;
console.log(a);  // 7

// addition assignment operator
a += 5;  // a = a + 5
console.log(a);  // 12

// subtraction assignment operator
a -= 5;  // a = a - 5
console.log(a);  // 7

// multiplication assignment operator
a *= 2;  // a = a * 2
console.log(a);  // 14

// division assignment operator
a /= 2;  // a = a / 2
console.log(a);  // 7

// remainder assignment operator
a %= 2;  // a = a % 2
console.log(a);  // 1

// exponentiation assignment operator
a **= 2;  // a = a**2
console.log(a);  // 1

-------------------------------------------------------------
3. Comparison Operators:- return boolean

Operator	Meaning	 Example
==	Equal to	     3 == 5 gives us false
!=	Not equal to	 3 != 4 gives us true
>	Greater than	 4 > 4 gives us false
<	Less than	     3 < 3 gives us false
>=	Greater than or equal to	4 >= 4 gives us true
<=	Less than or equal to	3 <= 3 gives us true
===	Strictly equal to	3 === "3" gives us false
!==	Strictly not equal to	3 !== "3" gives us true

** Q. Diff '==' and '==='?
   NOTE: 
   Value Comparison: Compares the content of values regardless of type (with == after type      coercion or === without coercion).
   Address Comparison (Reference): Compares if two references point to the same object in memory (using ===).

               ==                                          ===
1. Loose comparision bt LHS and RHS          Strict comparision bt LHS and RHS
2. Value comparision                         value and(&&) datatype comparision
3. LHS and RHS entities converting           3. comparing LHS and RHS without coercion 
   into values with coercion then 
   comparing              


console.log(true == 1)
console.log(true === 1)
console.log("" == 1)
console.log("" == 0)
console.log("" == false)
console.log("" === 0)

console.log("hi" && "1")
console.log("hi" || "1")
console.log("" || "1")
-------------------------------------------------------------
4. Logical Operators:- return boolean

Operator	Syntax	Description
&& (Logical AND)	expression1 && expression2	true only if both expression1 and expression2 are true
|| (Logical OR)	expression1 || expression2	true if either expression1 or expression2 is true
! (Logical NOT)	!expression	false if expression is true and vice versa

Examples: let out1 = condition1 && condition2; let out2 = condition1 || condition2; 

&& => 
    true: required both side true, then sencond(RHS) true will return.
    false: where false getting that one return as false
|| => 
    true: required one true, then where getting ture that one return. (if LHS getting true not checking RHS)
    false: Always returns (RHS) last false
-----------------------------------------------------------------------
5. Bitwise Operators:-

Operator Description	Example
&	Bitwise AND	        5 & 3  // 1
|	Bitwise OR	        5 | 3  // 7
^	Bitwise XOR	        5 ^ 3  // 6
~	Bitwise NOT	        ~5  // -6
<<	Left shift	        5 << 1  // 10
>>	Sign-propagating right shift	-10 >> 1  // -5
>>>	Zero-fill right shift	-10 >>> 1  // 2147483643

------------------------------------------------------------------------------
6. Miscellaneous Operators:-

Operator	Description	Example
,	Comma: Evaluates multiple operands and returns the value of the last operand.	let a = (1, 3, 4);  // 4
?:	Ternary: Returns value based on the condition.	(50 > 40) ? "pass" : "fail";  // "pass"
typeof	Returns the data type of the variable.	typeof 3;  // "number"
instanceof	Returns true if the specified object is a valid object of the specified class.	objectX instanceof ClassX
void	Discards any expression's return value.	void(x)  // undefined
-------------------------------------------------------------------------------------
7. ternary operator or conditional operator:
ternary operator will take three operands
 (condition) ? statemnet : statemnet ;
a=20
 var k = (a>25) ? 5 : 2 ;


Q. using ternary operator find the greatest number amongst 3 numbers
----------------------------------------------------------------------------------------
# string behaviour with operators:
# Corecion : forcefully datatype conversion for perform operation
  1. comparision operator: converting into number datatype
  2. Arithmetic operations:
      1. string: + (string concatination): simply addition of string
      2. string: (-*/) Datatype convert into number & with string perform mathematical operations.
      3. For unary operands + operator will convert datatype into number.

#Examples:
    str + str = str
    str + num = str
    num + str = str
    -----------------
    str - str = num
    str - num = num
    num - str = num
    -Same with *,/
    -----------------
    + str + num = num
    ------------------

       '12' + 12;       // '1212'
        13 + '1';        // '131'
        12.34 + '34';    // "12.3434"

        '12' - 10;     // 2
        '90.10' - 10;  // 80.10
        '12' * 12;     // 144
        '12' * '12';   // 144
        '12' / '12';   // 1
        'we' - 2;   // NaN

         '10' + 10;   // '1010'
          // But
          +'10' + 10;  // 20
          +'10';   // 10
          +'';    // 0
          
          10 + '0' - 30;             // 70
          (12 * '12' - 10) / '10';   // 13.4
          console.log("1"-"-1")
-----------------------------------------------------------------------------------

Q1. Ask user to enter 2 numbers & 1 operator (+ - * /)
   perform the operation based on the user entered operator.

      
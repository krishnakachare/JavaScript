1. Try-Catch Blocks:
    The try-catch statement is used to catch errors that occur within a block of code. This allows you to handle errors gracefully without crashing the entire application.

        try {
        // Code that may throw an error
        const result = someFunction();
        console.log(result);
        } catch (error) {
        // Handle the error
        console.error('An error occurred:', error.message);
        }

    In the above example:
    If someFunction() throws an error, it will be caught by the catch block.
    The error object contains information about the error, including its message property.

2. Throwing Custom Errors:
    You can create and throw custom errors using the throw statement. This allows you to define specific error conditions and provide meaningful error messages.

        function validateNumber(value) {
        if (typeof value !== 'number' || isNaN(value)) {
            throw new Error('Invalid number provided');
        }
        return value;
        }

        try {
        const result = validateNumber('abc');
        console.log(result); // This line will not execute if an error is thrown
        } catch (error) {
        console.error('Validation error:', error.message);
        }

3. Promise Error Handling:
    When working with asynchronous operations using promises, you can use .then() and .catch() to handle success and error cases, respectively.

        function fetchData() {
        return new Promise((resolve, reject) => {
            // Simulating asynchronous operation
            setTimeout(() => {
            const randomValue = Math.random();
            if (randomValue > 0.5) {
                resolve('Success');
            } else {
                reject(new Error('Request failed'));
            }
            }, 1000);
        });
        }

        fetchData()
        .then((response) => {
            console.log('Response:', response);
        })
        .catch((error) => {
            console.error('Error:', error.message);
        });

    In the above example:
    The fetchData() function returns a promise that resolves or rejects based on a random condition.
    Use .then() to handle the resolved value and .catch() to handle any errors that occur during promise execution.

4. Error Object Properties:
    The Error object has several properties that provide information about the error:
    name: The name of the error (e.g., 'Error', 'TypeError').
    message: A description of the error.
    stack: A stack trace that shows the sequence of function calls leading to the error (available in modern environments).

5. Handling Asynchronous Errors with Async/Await:
    With async/await, you can write asynchronous code that looks synchronous and use try-catch for error handling.

        async function fetchData() {
        try {
            const response = await fetch('https://api.example.com/data');
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching data:', error.message);
            throw error; // Rethrow the error if needed
        }
        }

        fetchData()
        .then((data) => {
            console.log('Data:', data);
        })
        .catch((error) => {
            console.error('Error in fetchData:', error.message);
        });

    In this example:
    The fetchData() function fetches data asynchronously using fetch and handles errors using try-catch.
    Use .then() and .catch() to handle the resolved value or any errors when calling fetchData().
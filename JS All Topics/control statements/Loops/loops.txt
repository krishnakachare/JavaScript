4.controls statements:
  1. Conditional statements: if, if-else, if-else if, nested if-else, switch case
  2. loops: while, do-while, for, for-in, for-of
  3. jump keywords: break, continue, return
---------------------------------------------------
# loops or iteration statements: They run until the condition fails. each run is one iteration.

# They are primirily two loops existed. 
    1. Entry control loops: At entry only the condition will be checked
       Eg: while, for
    2. Exit control loops: Condition will be checked after execution
       Eg: do while
    
------------------------------------    
1. while loop:
        initialization; i=0
        while(condition){ // i<10        
            //code i
            updation i++
        }

2. do-while loop:
        initalization;
        do{
            //code
            //updation
        }while(condition)

3. for loop:  initialization-->condition-->code execution-->updation-->condition
        for(initialization;condition;updation){        
            //code execution
        }

   - Nested for loop:
    1: Iterating Over a 2D Array
    2: Generating a Multiplication Table
    3: Cartesian Product of Two Arrays
    4: Printing Patterns
    
# No condition check, no updation:-
4. for-in loop:
        for(let index/key in object){
            //code execution
        }

5. for-of loop:
    for(let value of IterableObject){
        //code execution
    }

# Iterable Objects: Have a Symbol.iterator method, allowing them to be used with for-of loops and other iterable contexts. Examples include arrays, strings, maps, and sets.
# Non-Iterable Objects: Do not have a Symbol.iterator method and cannot be directly used in iterable contexts like for-of. Examples include plain objects unless explicitly made iterable.

for-in : Iterates over the keys (property names) of an object.
         Best suited for iterating over the properties of an object.
for-of : Iterates over the values of an iterable object. 
         Best suited for iterating over arrays,  strings, Map, Set, and other iterable objects.

for (let value of obj) { // TypeError: obj is not iterable
    console.log(value)  
}

- We get error because for..of loop works only on Iterable object like array.
- Here obj object are not iterables.
- make an object Iterable :
    1. Object.keys({})
    2. Object.values({})
    3. Object.entries({})

6. forEach loop: cover in array method.
------------------------------------------------------------
NOTE: Cover examples of break, continue, return in loop.
------------------------------------------------------------
------------------------------------------------------------
# Nested for loop Examples:

### Example 1: Iterating Over a 2D Array

const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

for (let i = 0; i < matrix.length; i++) {
  for (let j = 0; j < matrix[i].length; j++) {
    console.log(matrix[i][j]);
  }
}

// Output:
// 1
// 2
// 3
// 4
// 5
// 6
// 7
// 8
// 9
```
-----------------------------------------------------------------
### Example 2: Generating a Multiplication Table

const size = 10;
const table = [];

for (let i = 1; i <= size; i++) {
  const row = [];
  for (let j = 1; j <= size; j++) {
    row.push(i * j);
  }
  table.push(row);
}

for (let i = 0; i < table.length; i++) {
  console.log(table[i].join('\t'));
}

// Output:
// 1   2   3   4   5   6   7   8   9   10
// 2   4   6   8   10  12  14  16  18  20
// 3   6   9   12  15  18  21  24  27  30
// 4   8   12  16  20  24  28  32  36  40
// 5   10  15  20  25  30  35  40  45  50
// 6   12  18  24  30  36  42  48  54  60
// 7   14  21  28  35  42  49  56  63  70
// 8   16  24  32  40  48  56  64  72  80
// 9   18  27  36  45  54  63  72  81  90
// 10  20  30  40  50  60  70  80  90  100
```
------------------------------------------------------------
### Example 3: Cartesian Product of Two Arrays

const array1 = [1, 2, 3];
const array2 = ['a', 'b', 'c'];

for (let i = 0; i < array1.length; i++) {
  for (let j = 0; j < array2.length; j++) {
    console.log([array1[i], array2[j]]);
  }
}

// Output:
// [1, 'a']
// [1, 'b']
// [1, 'c']
// [2, 'a']
// [2, 'b']
// [2, 'c']
// [3, 'a']
// [3, 'b']
// [3, 'c']
```
----------------------------------------------------------
### Example 4: Flattening a 2D Array

const array2D = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
const flattened = [];

for (let i = 0; i < array2D.length; i++) {
  for (let j = 0; j < array2D[i].length; j++) {
    flattened.push(array2D[i][j]);
  }
}

console.log(flattened);

// Output:
// [1, 2, 3, 4, 5, 6, 7, 8, 9]
```
----------------------------------------------------------
### Example 5: Printing Patterns
#### Printing a Square Pattern

const n = 5;

for (let i = 0; i < n; i++) {
  let row = '';
  for (let j = 0; j < n; j++) {
    row += '* ';
  }
  console.log(row);
}

// Output:
// * * * * * 
// * * * * * 
// * * * * * 
// * * * * * 
// * * * * * 
```
-----------------------------------------------
#### Printing a Right-Angled Triangle

const height = 5;

for (let i = 1; i <= height; i++) {
  let row = '';
  for (let j = 0; j < i; j++) {
    row += '* ';
  }
  console.log(row);
}

// Output:
// * 
// * * 
// * * * 
// * * * * 
// * * * * * 
```
----------------------------------------------------------

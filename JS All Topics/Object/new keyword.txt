In JavaScript, the `new` keyword is used to create an instance of a user-defined object type or one of the built-in object types that has a constructor function. When you use `new`, it performs the following steps to create the new object:

1. **Create a New Object**: A new empty object is created.
2. **Set the Prototype**: The new objectâ€™s internal `[[Prototype]]` property is set to the constructor function's `prototype` property.
3. **Bind `this`**: The constructor function is called with `this` bound to the new object.
4. **Return the Object**: If the constructor function doesn't explicitly return an object, the new object created in step 1 is returned.

### Syntax

```javascript
const instance = new ConstructorFunction();
```

### Example

Here's a simple example using a constructor function:

```javascript
function Person(name, age) {
  this.name = name;
  this.age = age;
}

const person1 = new Person('Alice', 30);
console.log(person1.name); // "Alice"
console.log(person1.age);  // 30
```

### Detailed Steps

1. **Create a New Object**

   ```javascript
   const obj = {};
   ```

2. **Set the Prototype**

   ```javascript
   obj.__proto__ = ConstructorFunction.prototype;
   ```

3. **Bind `this`**

   The constructor function is called with `this` set to the newly created object.

   ```javascript
   const result = ConstructorFunction.call(obj, arg1, arg2, ...);
   ```

4. **Return the Object**

   If the constructor function returns an object, that object is returned. Otherwise, the new object created in step 1 is returned.

   ```javascript
   return typeof result === 'object' ? result : obj;
   ```

### Example with a Class

Using `new` with a class in ES6:

```javascript
class Car {
  constructor(make, model) {
    this.make = make;
    this.model = model;
  }

  displayInfo() {
    console.log(`${this.make} ${this.model}`);
  }
}

const car1 = new Car('Toyota', 'Corolla');
car1.displayInfo(); // "Toyota Corolla"
```

### Benefits

- **Object Initialization**: `new` allows for the initialization of objects with specific properties and methods.
- **Encapsulation**: Using constructor functions or classes with `new` helps encapsulate the creation logic and properties within the function or class.

### Limitations

- **Memory Management**: Improper use of `new` can lead to memory leaks if objects are not managed correctly.
- **Inheritance Complexity**: When dealing with complex inheritance chains, using `new` can sometimes lead to confusion about property and method inheritance.

### Error Handling

If you call a constructor function without `new`, the `this` keyword within the constructor function will refer to the global object (in non-strict mode) or be `undefined` (in strict mode). This can lead to unexpected behavior or errors.

To prevent this, you can check if `new.target` is `undefined` within the constructor function:

```javascript
function Person(name, age) {
  if (!new.target) {
    throw new Error('Person must be called with new');
  }
  this.name = name;
  this.age = age;
}

const person1 = new Person('Alice', 30); // Works fine
const person2 = Person('Bob', 25);       // Throws an error
```

### Summary

The `new` keyword in JavaScript is a powerful tool for creating and initializing objects. By using `new`, you can leverage constructor functions and classes to create structured and encapsulated instances with specific properties and methods, facilitating organized and modular code development.
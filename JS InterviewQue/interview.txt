1. JavaScript Engines: Learn about the engines that execute JavaScript, such as V8 (used in Chrome).
2. Value Types and Reference Types: Understand the distinction between primitive types and objects.
3. Primitive Types: Know the fundamental data types like string, number, boolean, null, undefined.
4. Expression vs Statement: Distinguish between expressions and statements in JavaScript code.
5. Function Scope, Block Scope, and Lexical Scope: Grasp how scopes work in JavaScript.
6. Message Queue and Event Loop: Understand asynchronous JavaScript through the event loop.
7. setTimeout, setInterval, and requestAnimationFrame: Manage time-related operations effectively.
8. == vs === vs typeof: Differentiate between loose equality, strict equality, and the typeof operator.
9. Call Stack: Learn how the call stack manages function calls and execution flow.
10. IIFE, Modules, and Namespaces: Organize and encapsulate code using Immediately Invoked Function Expressions and modularization.
11. Bitwise Operators, Type Arrays, and Array Buffers: Handle binary data efficiently with low-level operations.
12. DOM and Layout Trees: Understand the Document Object Model for web development.
13. Factory Functions and Classes: Explore different approaches for creating objects.
14. this, call, apply, and bind: Master context management and the 'this' keyword.
15. new, Constructor, instanceof, and Instances: Grasp object instantiation and constructor functions.
16. Prototypal Nature : Utilize prototype-based inheritance for code efficiency.
17. Object.create and Object.assign: Learn to create and manipulate objects effectively.
18. map, reduce, filter: Master array methods for functional programming.
19. Pure Functions, Side Effects, State Mutation, and Event Propagation: Write clean and maintainable code.
20. Closures: Manage variable scope and create modular code.
21. High Order Functions: Use higher-order functions for concise and expressive code.
22. Recursion: Solve problems efficiently with recursive functions.
23. Collections and Generators: Understand data structures and generators for data manipulation.
24. Asynchronous Operations: Handle asynchronous operations with callbacks, promise-based patterns and async/await .
25. Partial Applications, Currying, Compose, and Pipe: Explore functional programming concepts for code modularity.
26. Data Structures & Algorithms: Explore various data structures for problem-solving.
27. Inheritance, Polymorphism, and Code Reuse: Master object-oriented programming concepts for scalability.
28. Design Patterns: Apply reusable solutions to common problems for improved code architecture.
29. Clean Code: Prioritize writing clean and readable code following best practices for maintainability.




1. JavaScript Engines: Learn about the engines that execute JavaScript, such as V8 (used in Chrome).
2. Value Types and Reference Types: Understand the distinction between primitive types and objects.
3. Primitive Types: Know the fundamental data types like string, number, boolean, null, undefined.
4. Expression vs Statement: Distinguish between expressions and statements in JavaScript code.
5. Function Scope, Block Scope, and Lexical Scope: Grasp how scopes work in JavaScript.
6. Message Queue and Event Loop: Understand asynchronous JavaScript through the event loop.
7. setTimeout, setInterval, and requestAnimationFrame: Manage time-related operations effectively.
8. == vs === vs typeof: Differentiate between loose equality, strict equality, and the typeof operator.
9. Call Stack: Learn how the call stack manages function calls and execution flow.
10. IIFE, Modules, and Namespaces: Organize and encapsulate code using Immediately Invoked Function Expressions and modularization.
11. Bitwise Operators, Type Arrays, and Array Buffers: Handle binary data efficiently with low-level operations.
12. DOM and Layout Trees: Understand the Document Object Model for web development.
13. Factory Functions and Classes: Explore different approaches for creating objects.
14. this, call, apply, and bind: Master context management and the 'this' keyword.
15. new, Constructor, instanceof, and Instances: Grasp object instantiation and constructor functions.
16. Prototypal Nature : Utilize prototype-based inheritance for code efficiency.
17. Object.create and Object.assign: Learn to create and manipulate objects effectively.
18. map, reduce, filter: Master array methods for functional programming.
19. Pure Functions, Side Effects, State Mutation, and Event Propagation: Write clean and maintainable code.
20. Closures: Manage variable scope and create modular code.
21. High Order Functions: Use higher-order functions for concise and expressive code.
22. Recursion: Solve problems efficiently with recursive functions.
23. Collections and Generators: Understand data structures and generators for data manipulation.
24. Asynchronous Operations: Handle asynchronous operations with callbacks, promise-based patterns and async/await .
25. Partial Applications, Currying, Compose, and Pipe: Explore functional programming concepts for code modularity.
26. Data Structures & Algorithms: Explore various data structures for problem-solving.
27. Inheritance, Polymorphism, and Code Reuse: Master object-oriented programming concepts for scalability.
28. Design Patterns: Apply reusable solutions to common problems for improved code architecture.
29. Clean Code: Prioritize writing clean and readable code following best practices for maintainability.






1. Arrow function and what is the difference apart from syntax?
2. Call, apply bind (write down the code for one of them)
3. Generator Function and write a range Generator functions
4. Real time example of Generator Functions?
5. ES6 features
6. Write down the code for spread operator, rest operator and Object destructuring?
7. Difference between forEach and map?
8. Difference between Object.assign(), Object.create()? Which one mutates the data ?
9. What is a Promise ?
10. Write a function component in react which returns a lazy loaded Button Component and add the Suspense with fallback UI?
11. What is Error Boundary, How can we write a separate Error Boundary Component?
12. What is Redux, Why Redux , Core principles of redux?
13. Write down a basic sum function using Typescript and how do you accept params in either string or number?
14. What are Generics functions (inside Typescript), can you write down types ?
15. Abstract function means ?
16. Software Principles (DRY, KISS) how do you implemented in your codebase
17. Git hook (pre commit, husky)
18. SOLID Principles
19. Write down test cases ? What does beforeEach and beforeAll do ?
20. Difference between mock vs spy in testing?
21. Explain Testing Pyramid? 
22. Differences between Integration Testing vs End to End testing?
23. Which tool you have used for above of them ?
24. What do we mean by code coverage ? How do you measure code coverage? 
25. What is meant by OWASP top10?
26. What is meant by CSP, XSS (where do we set these CSP headers? In Client or Server)
27. What is meant by CORS? (Where do we set them)
28. DDD ? 
29. Explain me the various ways of Performance Optimization that you can do at any level (ex: CSS, JS, HTML)
30.What is CRP?
31. What are memory leaks in react ? Why do they happen ?
32. Promise.all vs Promise.any vs Promise.race?
33. How do you configure typescript in your project?
34. How many ways you can create an object ?
35. What does we have in .tsconfig.json? can you explain them?
36. Problem Solving

```js
// output the longest prefix that is found in the array of arguments
function lcp(arr) {
  
}

// Test cases
console.log(lcp(['saiteja', 'saviour', 'saas'])); // should return 'sa'
console.log(lcp(['racedog', 'car', 'racecar'])); // should return ''
```


------------------------------------------------------------------------------
𝟭-𝟭𝟬: 𝗕𝗮𝘀𝗶𝗰𝘀 𝗼𝗳 𝗝𝗮𝘃𝗮𝗦𝗰𝗿𝗶𝗽𝘁

1. What is JavaScript?
2. Explain the difference between let, const, and var.
3. How does hoisting work in JavaScript?
4. Describe the concept of closures.
5. Explain the event loop in JavaScript.
6. What is the difference between == and ===?
7. How do you check the type of a variable in JavaScript?
8. What is the use of the this keyword in JavaScript?
9. Explain the difference between function declaration and function expression.
10. How does the setTimeout function work?

𝟭𝟭-𝟮𝟬: 𝗙𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝗻𝗱 𝗦𝗰𝗼𝗽𝗲

11. What is a callback function?
12. Explain the concept of a pure function.
13. Describe the differences between function.call
, function.apply, and function.bind.
14. What is the purpose of the arguments object in a function?
15. How do you create a closure in JavaScript?
16. What is the use of the bind method?
17. What is the difference between a shallow copy and a deep copy?
18. How does the call stack work in JavaScript?
19. Explain the concept of function currying.
20. How can you avoid callback hell in JavaScript?

𝟮𝟭-𝟯𝟬: 𝗢𝗯𝗷𝗲𝗰𝘁𝘀 𝗮𝗻𝗱 𝗣𝗿𝗼𝘁𝗼𝘁𝘆𝗽𝗲𝘀

21. What is prototypal inheritance?
22. How do you create an object in JavaScript?
23. What is the purpose of the prototype property in JavaScript?
24. Explain the difference between Object.create and the constructor pattern.
25. How do you add a property to an object in JavaScript?
26. What is the hasOwnProperty method used for?
27. How can you prevent modification of object properties in JavaScript?
28. Describe the use of the new keyword.
29. Explain the concept of Object Destructuring in JavaScript.
30. What is the difference between null and undefined?

𝟯𝟭-𝟰𝟬: 𝗗𝗢𝗠 𝗠𝗮𝗻𝗶𝗽𝘂𝗹𝗮𝘁𝗶𝗼𝗻 𝗮𝗻𝗱 𝗘𝘃𝗲𝗻𝘁𝘀

31. What is the DOM?
32. How do you select elements with Vanilla JavaScript?
33. Explain event delegation in JavaScript.
34. What is the purpose of the addEventListener method?
35. How do you create and remove elements in the DOM?
36. Explain the concept of event propagation.
37. How can you prevent the default behaviour of an event?
38. What is the purpose of the data- attribute in HTML?
39. Describe the difference between innerHTML and textContent.
40. How do you handle asynchronous code in JavaScript?
------------------------------------------------------------------------------------------
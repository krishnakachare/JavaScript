1️⃣What is event delegation, and how does it function in JavaScript?
2️⃣Can you provide an illustration of how ES6 has altered the approach to working with "this" in JavaScript?
3️⃣Explain the concept of prototypal inheritance.
4️⃣Differentiate between a variable that is null, undefined, or undeclared.
5️⃣Define what a closure is and describe its uses and advantages.
6️⃣Explain the primary distinction between the Array.forEach() loop and Array.map
() method, as well as when to choose one over the other. (see polyfills also)
7️⃣What is a common scenario for employing anonymous functions?
8️⃣Distinguish between host objects and native objects.
9️⃣Clarify the distinctions among 'function User(){}', 'var user = User()', and 'var user = new User()
1️⃣0️⃣Can you explain the purposes of Function.call
 and Function.apply, along with their notable differences?
1️⃣1️⃣Describe the Function.prototype.bind method.
1️⃣2️⃣Explain the differences between feature detection, feature inference, and utilizing the User Agent (UA) string.
1️⃣3️⃣Define the concept of "hoisting."
1️⃣4️⃣What is type coercion, and what are some common pitfalls associated with relying on it in JavaScript code?
1️⃣5️⃣Describe event bubbling and event capturing.
1️⃣6️⃣What distinguishes an "attribute" from a "property"?
1️⃣7️⃣List the advantages and disadvantages of extending built-in JavaScript objects.
1️⃣8️⃣Explain the differences between == and ===.
1️⃣9️⃣Discuss the same-origin policy implications for JavaScript
2️⃣0️⃣Why is it referred to as a "Ternary operator," and what does the term "Ternary" signify?

===========================================================

1️⃣ JavaScript Engines: Learn about the engines that execute JavaScript, such as V8 (used in Chrome).
2️⃣Value Types and Reference Types: Understand the distinction between primitive types and objects.
3️⃣ Primitive Types: Know the fundamental data types like string, number, boolean, null, undefined.
4️⃣ Expression vs Statement: Distinguish between expressions and statements in JavaScript code.
5️⃣Function Scope, Block Scope, and Lexical Scope: Grasp how scopes work in JavaScript.
6️⃣Message Queue and Event Loop: Understand asynchronous JavaScript through the event loop.
7️⃣ setTimeout, setInterval, and requestAnimationFrame: Manage time-related operations effectively.
8️⃣== vs === vs typeof: Differentiate between loose equality, strict equality, and the typeof operator.
9️⃣Call Stack: Learn how the call stack manages function calls and execution flow.
🔟 IIFE, Modules, and Namespaces: Organize and encapsulate code using Immediately Invoked Function Expressions and modularization
1️⃣1️⃣ Bitwise Operators, Type Arrays, and Array Buffers: Handle binary data efficiently with low-level operations.
1️⃣2️⃣DOM and Layout Trees: Understand the Document Object Model for web development.
1️⃣3️⃣ Factory Functions and Classes: Explore different approaches for creating objects.
1️⃣4️⃣this, call, apply, and bind: Master context management and the 'this' keyword.
1️⃣5️⃣new, Constructor, instanceof, and Instances: Grasp object instantiation and constructor functions.
1️⃣6️⃣ Prototypal Nature: Utilize prototype-based inheritance for code efficiency.
1️⃣7️⃣ Object.create and Object.assign: Learn to create and manipulate objects effectively.
1️⃣8️⃣ map, reduce, filter: Master array methods for functional programming.
1️⃣9️⃣ Pure Functions, Side Effects, State Mutation, and Event Propagation: Write clean and maintainable code.
2️⃣0️⃣Closures: Manage variable scope and create modular code.
2️⃣1️⃣High Order Functions: Use higher-order functions for concise and expressive code.
2️⃣2️⃣Recursion: Solve problems efficiently with recursive functions.
2️⃣3️⃣ Collections and Generators: Understand data structures and generators for data manipulation.
2️⃣4️⃣Asynchronous Operations: Handle asynchronous operations with callbacks, promise-based patterns and async/await.
2️⃣5️⃣Partial Applications, Currying, Compose, and Pipe: Explore functional programming concepts for code modularity.
2️⃣6️⃣ Data Structures & Algorithms: Explore various data structures for problem-solving.
2️⃣7️⃣ Inheritance, Polymorphism, and Code Reuse: Master object-oriented programming concepts for scalability.
2️⃣8️⃣Design Patterns: Apply reusable solutions to common problems for improved code architecture.
2️⃣9️⃣ Clean Code: Prioritize writing clean and readable code following best practices for maintainability.


============================================================

𝟏-𝟏𝟎: 𝐁𝐚𝐬𝐢𝐜𝐬 𝐨𝐟 𝐉𝐚𝐯𝐚𝐒𝐜𝐫𝐢𝐩𝐭

1. What is JavaScript?
2. Explain the difference between let, const, and var. 
3. How does hoisting work in JavaScript?
4. Describe the concept of closures.
5. Explain the event loop in JavaScript.
6. What is the difference between == = and ===?
7. How do you check the type of a variable in JavaScript?
8. What is the use of the this keyword in JavaScript?
9. Explain the difference between function declaration and function expression.
10. How does the setTimeout function work?

𝟏𝟏-𝟐𝟎: 𝐅𝐮𝐧𝐜𝐭𝐢𝐨𝐧𝐬 𝐚𝐧𝐝 𝐒𝐜𝐨𝐩𝐞

11. What is a callback function?
12. Explain the concept of a pure function.
13. Describe the differences between function.call
,function.apply, and function.bind.
14. What is the purpose of the arguments object in a function?
15. How do you create a closure in JavaScript?
16. What is the use of the bind method?
17. What is the difference between a shallow copy and a deep copy?
18. How does the call stack work in JavaScript?
19. Explain the concept of function currying.
20. How can you avoid callback hell in JavaScript?

𝟐𝟏-𝟑𝟎: 𝐎𝐛𝐣𝐞𝐜𝐭𝐬 𝐚𝐧𝐝 𝐏𝐫𝐨𝐭𝐨𝐭𝐲𝐩𝐞𝐬

21. What is prototypal inheritance?
22. How do you create an object in JavaScript?
23. What is the purpose of the prototype property in JavaScript?
24. Explain the difference between Object.create and the constructor pattern.
25. How do you add a property to an object in JavaScript?
26. What is the hasOwnProperty method used for?
27. How can you prevent modification of object properties in JavaScript?
28. Describe the use of the new keyword.
29. Explain the concept of Object Destructuring in JavaScript. 
30. What is the difference between null and undefined?

𝟑𝟏-𝟒𝟎: 𝐃𝐎𝐌 𝐌𝐚𝐧𝐢𝐩𝐮𝐥𝐚𝐭𝐢𝐨𝐧 𝐚𝐧𝐝 𝐄𝐯𝐞𝐧𝐭𝐬

31. What is the DOM?
32. How do you select elements with Vanilla JavaScript?
33. Explain event delegation in JavaScript.
34. What is the purpose of the addEventListener method? 35. How do you create and remove elements in the DOM? 
36. Explain the concept of event propagation.
37. How can you prevent the default behaviour of an event?
38. What is the purpose of the data- attribute in HTML?
39. Describe the difference between innerHTML and textContent.
40. How do you handle asynchronous code in JavaScript?

==============================================================================

1. Write a function that reverses a given string.

2. Write a function that finds the longest word in a sentence.

3. Write a function that removes duplicates from an array.

4. Given an array containing numbers from 1 to N, with one number missing, find the missing number.

5. Write a function that checks if a given string is a palindrome.

6. How to empty an array in JavaScript?

7. How would you check if a number is an integer or decimal?

8. What will be the output of console.log(typeof NaN) and the reasoning behind it?

9. Predict the result of console.log(Math.max()) and explain why it produces that output.

10. Explain the output of console.log('foo' instanceof String) and its implications.

11. What will be the output of console.log([] + {}) and why?

12. Predict the output of console.log(typeof typeof 1) and explain the reasoning behind it.

13. Explain the output of console.log(3 * 'foo') and how JavaScript handles this operation.

14. What will be printed to the console when console.log(+'Infinity' - '5') is executed?

15. Predict the output of console.log('2' + 1) and explain the result.

16. Explain the output of console.log([] == ![]) and justify your answer.

17. What will be the output of console.log(0 == '0') in JavaScript and why?

18. What will be logged to the console when console.log([] == '') is executed and why?

19. Predict the output of console.log(null + null) and explain the result.

20. Explain the output of console.log('10' - - '5') and the type coercion involved.

21. What will be logged to the console when console.log(0.1 + 0.2 === 0.3) is executed and why?

22. Predict the output of console.log([] + []) and explain how JavaScript handles array concatenation.

23. What will be the output of console.log(NaN === NaN) and why does JavaScript behave this way?

24. Explain the output of console.log('2' - 1) and the type coercion involved.

25. What will be logged to the console when console.log('' + 1 + 0) is executed and why?

26. Predict the output of console.log(true + false) and explain the result.

27. What will be the result of console.log(!!"false" == !!"true") and why?

28. Explain the output of console.log([] == 0) and the reasoning behind it.

29. What will be logged to the console when console.log(typeof null) is executed and why?

30. Explain the output of console.log(1 / 0) and the reasoning behind it.
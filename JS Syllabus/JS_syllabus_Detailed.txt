# History and Evolution
    Origin and development of JavaScript
    ECMAScript standards

# JavaScript Basics
    1.	What JavaScript is?
        Setting up the development environment
    2.	First JavaScript script.
    3.	Comments in JS
    4.	Internal JS
    5.	External JS File 
    •	Difference between Front-End Js & Back-End javascript
    •	Applications of javascript:

6.	Variables:
    | ├── var
    | ├── let
    | └── const
    | └── Variable declaration without var, let, const  
    | const for object.

7.  Strict mode in js

8.	Variable Hoisting, TDZ
9.	variable scopes:
    | ├── Global scope
    | ├── Local scope / script scope
    | ├── Block scope : if-else block, for loop block
    | ├── function scope

10.	Data types in JS:
    1. Primitive/immutable Data types(6):- 
        1. string 
        2. Boolean
        3. Undefined
        4. Null
        5. Number
        6. Bigint
        7. Symbol
        
    2. Referance/Non-Primitive/mutable data types:- 
        1. Object (E.g.Date,);
        2. Array
        3. Function  
        4. RegEx 

11.	window methods: String(), Array()
    | | └──  Number() methods
    | | └──  Maths () methods
    | | └──  Dialogue boxes : alert(),confirm(),prompt()

12.	Operators:
    | ├── Arithmetic
    | ├── Assignment
    | ├── Comparison
    | ├── Logical
    | | └── Short Circuiting
    | ├── Unary
    | ├──Ternary (Conditional)
    | ├── Nullish 
    | ├── Optional operator  

13. Corecion

14.	Control Flow/Conditionals:
    | ├── if statement
    | ├── if-else statement
    | ├── else if statement
    | ├── switch statement(case, default)
    
15.	Loops
    | ├── for loop
    | ├── while loop
    | └── do-while loop
    | ├── for...in
    | └── for...of (Object methods)
    | break
    | continoue
    | return
    | Nested for loop ( Pattern print)

16.	Functions:
    | ├── Function declaration(named)
    | ├── Function expression(Anonymous)
    | ├── Arrow function
    | └── 'this' scope   
    | ├── IIFE (Immediately Invoked Function Expression)
    | ├── Higher order function
    | ├── Callback function
    | ├── function recursion (factorial, fibonacci)
    | ├── Function Curring
    | ├── Pure Function
    | └── Constructor Function 
    | └── Generators function
    | └── Function Hoisting:
    | └── Closures (Lexical scope)
    | └── Default Parameters in function-ES6
    | └── Memoization

•	Pass by value, Pass by address/referance
•	value comparison, address comparison
•	value copy, address/referance copy
•	shallow copy, Deep copy
   
17.	String:
    - Intro and defination 
    - quotes
    - template literal
    - multiline string
    - Escape characters
    - Corecion
    - eval()
    - string iteration (loop)
    - string Methods:     

18.	Array:
    | ├── Into and defination
    | ├── Array properties
    | ├── Array methods   
    | ├── Array iteration (loop)
   
19.	Object:
    | ├── Object ?     
    | ├── Symbol
    | ├── CURD operations
      └── ways of object create(C)
          └── Class
                └── static, instance properties & Methods
                └── public, private properties & Methods
      └── Retrive(R & U) properties
          └── Dot notation
          └── Bracket notation
    | ├── loop on object
    | ├── Object properties & Methods:
          └── prototype, __proto__
          └── prototype inheritance, prototype chain
    | ├── Getter, setter 
    | ├── 'this' keyword, this scope
    | ├── Call() , bind() , apply() 
    
   
19.	OOPS :
    | ├── Inheritance (extends-super, prototype) 
    | ├── Polymorphism (overloading, overriding)
    | ├── Abstraction
    | ├── Encapsulation (Private feild in class, getter-setter)

21.	Map() & Set()
    | ├── Defination
    | ├── Ways of creation
    | ├── Properties & Methods

21.	Date & Time
    | ├── Ways of creation
    | ├── Methods: toString(),toLocaleString(),toDateString(),toLocaleDateString(),toTimeString(),toLocaleTimeString();
    | ├── get Methods
    | ├── set Methods
   
31. JSON:
    |── JSON (JavaScript Object Notation)
    |── JSON.stringify(), JSON.parse()

•	array Destructuring, object Destructuring
•	spread operator, REST Parameter

•	REGEX:

•	Asynchronous JavaScript (AJAX):
    | ├── Callbackss
    | ├── Promise:
        | ├── Promise states : Pending, Fulfilled, Rejected
        | ├── Promise methods : then(), catch(), finally()
        | └── Promise.all()
    | └── Async/Await

Callbacks

Understanding callbacks
Callback hell and how to avoid it
Promises

Creating and using promises
Chaining promises
Handling errors with promises
Async/Await

Converting promise-based code to async/await
Error handling with try/catch in async functions




25.	setInterval, SetTimeout
    |── Web APIs:
    | ├── Local Storage
    | ├── Session Storage
    | ├── Cookies
    | ├── Offline Storage
    | └── Web Storage API

•	Working with API:
    | ├──Fetch API

x. DOM:
    |── DOM Manipulation:
    | ├── Selecting elements
    | ├── Modifying elements
    | └── Creating elements
    
    |── Event Handling:
    | ├── Event listeners
    | ├── Event propagation
    | └── Event delegation
    •  Event Object
    •  Bubbling and Capturing

8. Browser APIs
Document Object Model (DOM)

Selecting elements (getElementById, querySelector, querySelectorAll)
Modifying elements (text content, HTML content, attributes, styles)
Creating and removing elements
Event handling (adding and removing event listeners)
Event delegation
Browser Storage

localStorage and sessionStorage
Cookies
Fetch API

Making HTTP requests with fetch
Handling responses and errors





26.	BOM(Browser Object Model)

24. Node.js Specific Concepts
    •  require()
    •  Node.js Modules (module.exports)
    •  File System Module (fs)
    •  npm (Node Package Manager)

•	Read, wright file in js

32. Modules in js:
    |── Modules
    | ├── import
    | └── export
    •  Import and export Statements (ES6 Modules)
    •  CommonJS Modules (require, module.exports)

x. Left-hand-side expressions:
    •  Property accessors
    •  ?.
    •  new
    •  new .target
    •  import.meta
    •  super
    •  import()

***********************************************************
•	Debugging:
    | ├── Console.log()
    | ├── Breakpoints
    | └── DevTools
    |── ESLint    

•	Error Handling:
    | ├── try...catch statement
    | └── throw statement 

•	JavaScript Execution:
        -Execution context
        -callback queue
        -Event loop

25.Testing Frameworks
    •  Jasmine 
    •  Mocha
    •  Jest

===============================================================

# ES-6 Features (ES-2015) :
-----------------------------------------
1. const & let 
2. From IIFEs to blocks
3. concatenating strings to template literals
4. Multi-line strings
6. default parameter values
7. from arguments to rest parameters(...)
8. exponent operator (**)
9.  Desturcturing (array/object)
10. for-loop to for-in and for-of
11. arrow functions
12. From apply() to the spread operator (...)
13. Enhanced Object Literals
14. From constructors to classes
15. inheritance - class,extends
16. Modules
17. collection-Map,weakmap,Set,weakset
18. promise and async-await
19. generators
20. Tail Calls


# JavaScript Projects:

  
# JS Libraries and Frameworks
    | ├── React
    | ├── Angular
    | └── Vue.js

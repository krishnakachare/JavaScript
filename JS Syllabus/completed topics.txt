1. History and Evolution:
    • Origin and development of JavaScript
    • ECMAScript standards

2. JavaScript Basics:
    •	What JavaScript is?
    •   Setting up the development environment
    •	First JavaScript script.
    •	Comments in JS
    •	Internal JS
    •	External JS File 
    •   JavaScript Execution : Execution parts 
    •	Difference between Front-End Js & Back-End javascript
    •	Applications of javascript

3.	Variables:
    | ├── var
    | ├── let
    | └── const
    | └── Variable declaration without var, let, const  
    | const for object.

4.  Strict mode in js

5.	Variable Hoisting, TDZ
6.	variable scopes:
    | ├── Global scope
    | ├── Local scope / script scope
    | ├── Block scope : if-else block, for loop block
    | ├── function scope

7.	Data types in JS:
    1. Primitive/immutable Data types(6):- 
        1. string 
        2. Boolean
        3. Undefined
        4. Null
        5. Number
        6. Bigint
        7. Symbol
        
    2. Referance/Non-Primitive/mutable data types:- 
        1. Object (E.g.Date,);
        2. Array
        3. Function  
        4. RegEx 

8.	window methods: String(), Array()
    | | └──  Number() methods
    | | └──  Maths () methods
    | | └──  Dialogue boxes : alert(),confirm(),prompt()

9.	Operators:
    | ├── Arithmetic
    | ├── Assignment
    | ├── Comparison
    | ├── Logical
    | | └── Short Circuiting
    | ├── Unary
    | ├──Ternary (Conditional)
    | ├── Nullish 
    | ├── Optional operator  

10. Corecion

11.	Control Flow/Conditionals:
    | ├── if statement
    | ├── if-else statement
    | ├── else if statement
    | ├── switch statement(case, default)
    
12.	Loops
    | ├── for loop
    | ├── while loop
    | └── do-while loop
    | ├── for...in
    | └── for...of (Object methods)
    | break
    | continoue
    | return
    | Nested for loop ( Pattern print)

13.	Functions:
    | ├── Function declaration(named)
    | ├── Function expression(Anonymous)
    | ├── Arrow function
    | └── 'this' scope   
    | ├── IIFE (Immediately Invoked Function Expression)
    | ├── Higher order function
    | ├── Callback function
    | ├── function recursion (factorial, fibonacci)
    | └── Constructor Function 
    | └── Generators function
    | └── Function Hoisting:
    | └── Closures (Lexical scope)
    | └── Default Parameters in function-ES6

14.	Pass by value, Pass by address/referance
15.	value comparison, address comparison
16.	value copy, address/referance copy
17.	shallow copy, Deep copy
   
18.	String:
    - Intro and defination 
    - quotes
    - template literal
    - multiline string
    - Corecion 

19.	Array:
    | ├── Into and defination 
    | ├── Array iteration (loop)
   
20.	Object:
    | ├── Object ?     
    | ├── Symbol
    | ├── CURD operations
      └── ways of object create(C)
          └── Class
                └── static, instance properties & Methods
                └── public, private properties & Methods
      └── Retrive(R & U) properties
          └── Dot notation
          └── Bracket notation
    | ├── loop on object
    | ├── Object properties & Methods:
          └── prototype, __proto__
          └── prototype inheritance, prototype chain
    | ├── Getter, setter 
    | ├── 'this' keyword, this scope
    | ├── Call() , bind() , apply() 
    
   
21.	OOPS :
    | ├── Inheritance (extends-super, prototype) 
    | ├── Polymorphism (overloading, overriding)
    | ├── Abstraction
    | ├── Encapsulation (Private feild in class, getter-setter)

22.	Map() & Set()
    | ├── Defination
    | ├── Ways of creation
    | ├── Properties & Methods

23.	Date & Time
    | ├── Ways of creation
    | ├── Methods: toString(),toLocaleString(),toDateString(),toLocaleDateString(),toTimeString(),toLocaleTimeString();
    | ├── get Methods
    | ├── set Methods